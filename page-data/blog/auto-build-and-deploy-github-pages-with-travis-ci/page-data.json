{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/auto-build-and-deploy-github-pages-with-travis-ci/","result":{"data":{"site":{"siteMetadata":{"title":"Peter Halliday","siteUrl":"https://pghalliday.com/portfolio"}},"markdownRemark":{"id":"494e3d1c-ac48-56ae-8c3d-70dd1ed9d965","excerpt":"So you have an existing Jekyll GitHub pages project but you also have some preliminary build steps and/or tests that you need to run before pushing to GitHub to…","html":"<p>So you have an existing <a href=\"http://jekyllrb.com/\">Jekyll</a> <a href=\"https://pages.github.com/\">GitHub pages</a> project but you also have some preliminary build steps and/or tests that you need to run before pushing to GitHub to deploy. Now you’re tired of running these steps manually and keeping the built artifacts in your repository. One answer (and the answer illustrated here) is to use <a href=\"https://travis-ci.org/\">Travis-CI</a> to automate the build and deploy steps and retire the automatic Jekyll build that GitHub would perform.</p>\n<p>First checkout the GitHub pages project to a new <code class=\"language-text\">deploy</code> branch.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> checkout -b deploy\n<span class=\"token function\">git</span> push -u origin deploy</code></pre></div>\n<p>Enable <a href=\"https://travis-ci.org/\">Travis-CI</a> on your GitHub pages project.</p>\n<p>Set <code class=\"language-text\">deploy</code> to be the default branch in the GitHub web interface. This will be the branch that you do most of your work in or make future branches from, so it makes sense for it to be the default. You will no longer manually make changes to the <code class=\"language-text\">master</code> branch.</p>\n<p>Add the SSH key entries to <code class=\"language-text\">.gitignore</code> as illustrated here</p>\n<script src=\"https://gist.github.com/pghalliday/240fe740d523dad21d3f.js?file=gitignore.sh\"></script>\n<p>Generate a private/public key pair without passphrase in the repo directory</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">ssh-keygen -t rsa -C <span class=\"token string\">\"deploy@travis-ci.org\"</span> -f deploy_key -N <span class=\"token string\">''</span></code></pre></div>\n<p>Add the public key (<code class=\"language-text\">deploy_key.pub</code>) to the GitHub repository as a ‘Deploy Key’ through the web interface. We are using deploy keys so that we can make them specific to a single repository. An alternative approach could use ‘Personal access tokens’ but they would then allow access to all repositories associated with the given account - this might be preferable in an organization context, using special GitHub accounts created specifically for Travis-CI to work with multiple repositories. The use of ‘Personal access tokens’ (and my starting point for this approach) is illustrated in Evan Sosenko’s article, <a href=\"http://evansosenko.com/posts/automatic-publishing-github-pages-travis-ci/\">“Automatic publishing to GitHub Pages with Travis CI”</a>.</p>\n<p>Install the travis gem</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">gem <span class=\"token function\">install</span> travis</code></pre></div>\n<p>Login to travis with your GitHub credentials</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">travis login</code></pre></div>\n<p>Encrypt the SSH key to generate <code class=\"language-text\">deploy_key.enc</code></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">travis encrypt-file deploy_key</code></pre></div>\n<p>This will ouput a command that can be used to decrypt the file again during a Travis build. This command has already been added to <code class=\"language-text\">deploy.sh</code>, however you will need to make a note of the unique encryption label that Travis assigns as this will be added as an environment variable in <code class=\"language-text\">.travis.yml</code> later. The encryption label can be seen in the command in 2 different variables</p>\n<ul>\n<li><code class=\"language-text\">encrypted_${ENCRYPTION_LABEL}_key</code></li>\n<li><code class=\"language-text\">encrypted_${ENCRYPTION_LABEL}_iv</code></li>\n</ul>\n<p>Add the <code class=\"language-text\">deploy.sh</code> file as given here and mark it executable</p>\n<script src=\"https://gist.github.com/pghalliday/240fe740d523dad21d3f.js?file=auto-build-and-deploy-github-pages-with-travis-ci.sh\"></script>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">chmod</span> +x deploy.sh</code></pre></div>\n<p>Add a <code class=\"language-text\">.travis.yml</code> to the branch as given here</p>\n<script src=\"https://gist.github.com/pghalliday/240fe740d523dad21d3f.js?file=deploy.travis.yml\"></script>\n<p>Add a <code class=\"language-text\">build</code> task to your <code class=\"language-text\">Rakefile</code> that at least calls <code class=\"language-text\">jekyll build</code> but should also perform the additional build and test steps that you wanted Travis-CI to do in the first place.</p>\n<p>Commit your changes to the <code class=\"language-text\">deploy</code> branch but don’t push them yet</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> -A <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"adding travis auto build and deploy support\"</span></code></pre></div>\n<p>Switch back to the <code class=\"language-text\">master</code> branch that GitHub will use for the source of your GitHub pages site</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> checkout master</code></pre></div>\n<p>Delete all the existing files and create a <code class=\"language-text\">.nojekyll</code> file to let GitHub know that it does not need to run Jekyll again.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">touch</span> .nojekyll</code></pre></div>\n<p>Add a <code class=\"language-text\">.travis.yml</code> file to the <code class=\"language-text\">master</code> branch as given here to prevent Travis-CI building the master branch when it changes. After all there is nothing for Travis-CI to do in the master branch</p>\n<script src=\"https://gist.github.com/pghalliday/240fe740d523dad21d3f.js?file=master.travis.yml\"></script>\n<p>Commit the <code class=\"language-text\">master</code> branch and push both branches back to GitHub</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> -A <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Prepare master branch as a deployment target\"</span>\n<span class=\"token function\">git</span> push --all</code></pre></div>\n<p>This will trigger Travis-CI to do its first deployment from the <code class=\"language-text\">deploy</code> branch.</p>","frontmatter":{"disqus_identifier":"auto-build-and-deploy-github-pages-with-travis-ci","title":"Auto build and deploy GitHub pages with Travis-CI","date":"September 19, 2014","description":null},"fields":{"slug":"/blog/auto-build-and-deploy-github-pages-with-travis-ci/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/auto-build-and-deploy-github-pages-with-travis-ci/","previous":{"fields":{"slug":"/blog/running-a-full-bitcoin-node-on-aws/"},"frontmatter":{"title":"Running a full Bitcoin node on AWS"}},"next":{"fields":{"slug":"/blog/some-useful-jenkins-groovy-scripts/"},"frontmatter":{"title":"Some useful Jenkins Groovy scripts"}}}}}