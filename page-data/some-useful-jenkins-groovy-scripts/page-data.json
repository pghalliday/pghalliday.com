{"componentChunkName":"component---src-templates-blog-post-js","path":"/some-useful-jenkins-groovy-scripts/","result":{"data":{"site":{"siteMetadata":{"title":"Peter Halliday","siteUrl":"https://pghalliday.com/portfolio"}},"markdownRemark":{"id":"5e9c1627-8e67-5ed3-8ff6-65d3f28a3d03","excerpt":"Recently I needed to automate the deployment and configuration of a Jenkins server. My configuration management tool of choice is Chef and my starting point is…","html":"<p>Recently I needed to automate the deployment and configuration of a <a href=\"http://jenkins-ci.org/\">Jenkins</a> server. My configuration management tool of choice is <a href=\"https://www.getchef.com/\">Chef</a> and my starting point is the <a href=\"https://github.com/opscode-cookbooks/jenkins\">Opscode Jenkins cookbook</a>. At this time the Jenkins cookbook only provides resources for basic Jenkins configuration, eg. <code class=\"language-text\">jenkins_user</code>, however it also exposes the <code class=\"language-text\">jenkins_script</code> resource for running arbitrary <a href=\"http://groovy.codehaus.org/\">Groovy</a> scripts on the server.</p>\n<p>Using Groovy it’s possible to configure pretty much every part of a Jenkins server and even its plugins. However, finding documentation on how is not so trivial - the best place to start is the <a href=\"http://javadoc.jenkins-ci.org/\">Jenkins Javadocs</a>.</p>\n<p>All of the following scripts were run with the <code class=\"language-text\">jenkins_script</code> resource as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">jenkins_script <span class=\"token string\">'resource name'</span> <span class=\"token keyword\">do</span>\n  command <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token constant\">EOH</span><span class=\"token punctuation\">.</span>gsub<span class=\"token punctuation\">(</span><span class=\"token regex\">/^ {4}/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">Groovy</span> <span class=\"token constant\">Script</span><span class=\"token punctuation\">]</span>\n  <span class=\"token constant\">EOH</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>It should also be noted that although it might be possible to write idempotent Groovy scripts the following are not exactly idempotent (although they can mostly be run as many times as you like without messing up the configuration)</p>\n<h2>Setting permissions</h2>\n<p>The first thing I needed to do was configure user permisssions so that only a user called <code class=\"language-text\">admin</code> could access anything. Note that the following script assumes that an <code class=\"language-text\">admin</code> user has been added already. Also in the context of a Chef run, immediately after running this, Chef will no longer be able to run scripts on the server unless it uses a private key that has been associated with the <code class=\"language-text\">admin</code> user (the solution to this problem is given in the <a href=\"#appendix\">appendix</a>).</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">import</span> jenkins<span class=\"token operator\">.</span>model<span class=\"token operator\">.</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> hudson<span class=\"token operator\">.</span>security<span class=\"token operator\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">def</span> instance <span class=\"token operator\">=</span> Jenkins<span class=\"token operator\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> hudsonRealm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HudsonPrivateSecurityRealm</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\ninstance<span class=\"token operator\">.</span><span class=\"token function\">setSecurityRealm</span><span class=\"token punctuation\">(</span>hudsonRealm<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> strategy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GlobalMatrixAuthorizationStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstrategy<span class=\"token operator\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Jenkins<span class=\"token operator\">.</span>ADMINISTER<span class=\"token punctuation\">,</span> <span class=\"token string gstring\">\"admin\"</span><span class=\"token punctuation\">)</span>\ninstance<span class=\"token operator\">.</span><span class=\"token function\">setAuthorizationStrategy</span><span class=\"token punctuation\">(</span>strategy<span class=\"token punctuation\">)</span>\n\ninstance<span class=\"token operator\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Set the slave agent port</h2>\n<p>By default the jenkins slave agent port is randomized. However in my case I needed to configure my cluster using a firewall on the Jenkins master and thus wanted to open a single port to use for build slaves to communicate with the master using JNLP.</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">import</span> jenkins<span class=\"token operator\">.</span>model<span class=\"token operator\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">def</span> instance <span class=\"token operator\">=</span> Jenkins<span class=\"token operator\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ninstance<span class=\"token operator\">.</span><span class=\"token function\">setSlaveAgentPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>the fixed port number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\ninstance<span class=\"token operator\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Set the administrator email address</h2>\n<p>This is the <code class=\"language-text\">System Admin e-mail address</code> set in the Jenkins configuration</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">import</span> jenkins<span class=\"token operator\">.</span>model<span class=\"token operator\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">def</span> jenkinsLocationConfiguration <span class=\"token operator\">=</span> JenkinsLocationConfiguration<span class=\"token operator\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\njenkinsLocationConfiguration<span class=\"token operator\">.</span><span class=\"token function\">setAdminAddress</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"[your admin name] &lt;[your admin email address]>\"</span><span class=\"token punctuation\">)</span>\n\njenkinsLocationConfiguration<span class=\"token operator\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Set the mail server configuration</h2>\n<p>I need the Jenkins server to mail notifications so I need to configure an SMTP server for it to use</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">import</span> jenkins<span class=\"token operator\">.</span>model<span class=\"token operator\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">def</span> inst <span class=\"token operator\">=</span> Jenkins<span class=\"token operator\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> desc <span class=\"token operator\">=</span> inst<span class=\"token operator\">.</span><span class=\"token function\">getDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"hudson.tasks.Mailer\"</span><span class=\"token punctuation\">)</span>\n\ndesc<span class=\"token operator\">.</span><span class=\"token function\">setSmtpAuth</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"[SMTP user]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string gstring\">\"[SMTP password]\"</span><span class=\"token punctuation\">)</span>\ndesc<span class=\"token operator\">.</span><span class=\"token function\">setReplyToAddress</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"[reply to email address]\"</span><span class=\"token punctuation\">)</span>\ndesc<span class=\"token operator\">.</span><span class=\"token function\">setSmtpHost</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"[SMTP host]\"</span><span class=\"token punctuation\">)</span>\ndesc<span class=\"token operator\">.</span><span class=\"token function\">setUseSsl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span> or <span class=\"token boolean\">false</span> to use SLL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndesc<span class=\"token operator\">.</span><span class=\"token function\">setSmtpPort</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"[SMTP port]\"</span><span class=\"token punctuation\">)</span>\ndesc<span class=\"token operator\">.</span><span class=\"token function\">setCharset</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"[character set]\"</span><span class=\"token punctuation\">)</span>\n\ndesc<span class=\"token operator\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Set the Git plugin configuration</h2>\n<p>The git client used by Jenkins should have a user name and email set</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">import</span> jenkins<span class=\"token operator\">.</span>model<span class=\"token operator\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">def</span> inst <span class=\"token operator\">=</span> Jenkins<span class=\"token operator\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> desc <span class=\"token operator\">=</span> inst<span class=\"token operator\">.</span><span class=\"token function\">getDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"hudson.plugins.git.GitSCM\"</span><span class=\"token punctuation\">)</span>\n\ndesc<span class=\"token operator\">.</span><span class=\"token function\">setGlobalConfigName</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"[name to use with git commits]\"</span><span class=\"token punctuation\">)</span>\ndesc<span class=\"token operator\">.</span><span class=\"token function\">setGlobalConfigEmail</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"[email to use with git commits]\"</span><span class=\"token punctuation\">)</span>\n\ndesc<span class=\"token operator\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Sonar plugin configuration</h2>\n<p>We use Sonar to run static analysis on code and record code coverage, etc. As such I needed to configure both a Sonar installation and a default Sonar runner for Jenkins to use. Javadocs for the Sonar plugin were not so easy to track down and when I did they were not so accurate so some of this was arrived at through trial and error. The best reference however, is the <a href=\"https://github.com/SonarSource/jenkins-sonar-plugin\">Sonar plugin source</a> itself.</p>\n<h3>Add the Sonar installation</h3>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">import</span> jenkins<span class=\"token operator\">.</span>model<span class=\"token operator\">.</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> hudson<span class=\"token operator\">.</span>plugins<span class=\"token operator\">.</span>sonar<span class=\"token operator\">.</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> hudson<span class=\"token operator\">.</span>plugins<span class=\"token operator\">.</span>sonar<span class=\"token operator\">.</span>model<span class=\"token operator\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">def</span> inst <span class=\"token operator\">=</span> Jenkins<span class=\"token operator\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> desc <span class=\"token operator\">=</span> inst<span class=\"token operator\">.</span><span class=\"token function\">getDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"hudson.plugins.sonar.SonarPublisher\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> sinst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SonarInstallation</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string gstring\">\"[name of the sonar installation - I use the host name]\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span> or <span class=\"token boolean\">false</span> to disable the sonar installation<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string gstring\">\"[sonar server url]\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string gstring\">\"[sonar database url]\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string gstring\">\"[sonar database driver]\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string gstring\">\"[sonar database user]\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string gstring\">\"[sonar database password]\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string gstring\">\"[version of sonar maven plugin - I don't use maven so leave this blank]\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string gstring\">\"[additional properties to pass to maven - again I leave this blank]\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">TriggersConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string gstring\">\"[sonar user]\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string gstring\">\"[sonar password]\"</span>\n<span class=\"token punctuation\">)</span>\ndesc<span class=\"token operator\">.</span><span class=\"token function\">setInstallations</span><span class=\"token punctuation\">(</span>sinst<span class=\"token punctuation\">)</span>\n\ndesc<span class=\"token operator\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Add the Sonar runner</h3>\n<p>This adds a runner that will be installed automatically from Maven central</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">import</span> jenkins<span class=\"token operator\">.</span>model<span class=\"token operator\">.</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> hudson<span class=\"token operator\">.</span>plugins<span class=\"token operator\">.</span>sonar<span class=\"token operator\">.</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> hudson<span class=\"token operator\">.</span>tools<span class=\"token operator\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">def</span> inst <span class=\"token operator\">=</span> Jenkins<span class=\"token operator\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> desc <span class=\"token operator\">=</span> inst<span class=\"token operator\">.</span><span class=\"token function\">getDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"hudson.plugins.sonar.SonarRunnerInstallation\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> installer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SonarRunnerInstaller</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"[sonar runner version]\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> prop <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InstallSourceProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>installer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> sinst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SonarRunnerInstallation</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"[name of the sonar runner - I called it Default]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string gstring\">\"[home? - not sure how this is used and I left it blank]\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndesc<span class=\"token operator\">.</span><span class=\"token function\">setInstallations</span><span class=\"token punctuation\">(</span>sinst<span class=\"token punctuation\">)</span>\n\ndesc<span class=\"token operator\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Set the number of executors</h2>\n<p>As I was building a Jenkins cluster I wanted all my builds to run on slaves and as such the master should have 0 executors. This was the only problem script as it requires a Jenkins restart to apply. I didn’t want Jenkins to restart everytime the chef client ran (there’s that idempotence problem) so had to wrap this with a flag to ensure it only ran on the first Chef run.</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">import</span> jenkins<span class=\"token operator\">.</span>model<span class=\"token operator\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">def</span> instance <span class=\"token operator\">=</span> Jenkins<span class=\"token operator\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ninstance<span class=\"token operator\">.</span><span class=\"token function\">setNumExecutors</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\ninstance<span class=\"token operator\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and wrapped as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">jenkins_script <span class=\"token string\">'master should have 0 executors'</span> <span class=\"token keyword\">do</span>\n  command <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token constant\">EOH</span><span class=\"token punctuation\">.</span>gsub<span class=\"token punctuation\">(</span><span class=\"token regex\">/^ {4}/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    import jenkins<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">instance</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">Jenkins</span><span class=\"token punctuation\">.</span>getInstance<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    instance<span class=\"token punctuation\">.</span>setNumExecutors<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    instance<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token constant\">EOH</span>\n  notifies <span class=\"token symbol\">:create</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ruby_block[set the executors_set flag]'</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:immediately</span>\n  notifies <span class=\"token symbol\">:restart</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'service[jenkins]'</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:delayed</span>\n  not_if <span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">.</span>attribute<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token string\">'executors_set'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span>\n\nruby_block <span class=\"token string\">'set the executors_set flag'</span> <span class=\"token keyword\">do</span>\n  block <span class=\"token keyword\">do</span>\n    node<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">[</span><span class=\"token string\">'executors_set'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span>\n    node<span class=\"token punctuation\">.</span>save\n  <span class=\"token keyword\">end</span>\n  action <span class=\"token symbol\">:nothing</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h2>Appendix</h2>\n<p>Here’s how to add a Jenkins user with Chef and the Jenkins cookbook such that once the user and key has been added, Chef then uses that key for future communication with the server.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># If security was enabled in a previous chef run then set the private key in the run_state</span>\n<span class=\"token comment\"># now as required by the Jenkins cookbook</span>\nruby_block <span class=\"token string\">'set jenkins private key'</span> <span class=\"token keyword\">do</span>\n  block <span class=\"token keyword\">do</span>\n    node<span class=\"token punctuation\">.</span>run_state<span class=\"token punctuation\">[</span><span class=\"token symbol\">:jenkins_private_key</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'[your private key]'</span>\n  <span class=\"token keyword\">end</span>\n  only_if <span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">.</span>attribute<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token string\">'security_enabled'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># Add the admin user only if it has not been added already then notify the resource</span>\n<span class=\"token comment\"># to configure the permissions for the admin user</span>\njenkins_user <span class=\"token string\">'admin'</span> <span class=\"token keyword\">do</span>\n  password <span class=\"token string\">'[your admin password]'</span>\n  public_keys <span class=\"token punctuation\">[</span><span class=\"token string\">'[your public key]'</span><span class=\"token punctuation\">]</span>\n  not_if <span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">.</span>attribute<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token string\">'security_enabled'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  notifies <span class=\"token symbol\">:execute</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jenkins_script[configure permissions]'</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:immediately</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># Configure the permissions so that login is required and the admin user is an administrator</span>\n<span class=\"token comment\"># after this point the private key will be required to execute jenkins scripts (including querying</span>\n<span class=\"token comment\"># if users exist) so we notify the `set the security_enabled flag` resource to set this up.</span>\n<span class=\"token comment\"># Also note that since Jenkins 1.556 the private key cannot be used until after the admin user</span>\n<span class=\"token comment\"># has been added to the security realm</span>\njenkins_script <span class=\"token string\">'configure permissions'</span> <span class=\"token keyword\">do</span>\n  command <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token constant\">EOH</span><span class=\"token punctuation\">.</span>gsub<span class=\"token punctuation\">(</span><span class=\"token regex\">/^ {4}/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    import jenkins<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n    import hudson<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">instance</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">Jenkins</span><span class=\"token punctuation\">.</span>getInstance<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">hudsonRealm</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HudsonPrivateSecurityRealm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>setSecurityRealm<span class=\"token punctuation\">(</span>hudsonRealm<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">strategy</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GlobalMatrixAuthorizationStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    strategy<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token constant\">Jenkins</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ADMINISTER</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>setAuthorizationStrategy<span class=\"token punctuation\">(</span>strategy<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token constant\">EOH</span>\n  notifies <span class=\"token symbol\">:create</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ruby_block[set the security_enabled flag]'</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:immediately</span>\n  action <span class=\"token symbol\">:nothing</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># Set the security enabled flag and set the run_state to use the configured private key</span>\nruby_block <span class=\"token string\">'set the security_enabled flag'</span> <span class=\"token keyword\">do</span>\n  block <span class=\"token keyword\">do</span>\n    node<span class=\"token punctuation\">.</span>run_state<span class=\"token punctuation\">[</span><span class=\"token symbol\">:jenkins_private_key</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'[your private key]'</span>\n    node<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">[</span><span class=\"token string\">'security_enabled'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span>\n    node<span class=\"token punctuation\">.</span>save\n  <span class=\"token keyword\">end</span>\n  action <span class=\"token symbol\">:nothing</span>\n<span class=\"token keyword\">end</span></code></pre></div>","frontmatter":{"disqus_identifier":"some-useful-jenkins-groovy-scripts","title":"Some useful Jenkins Groovy scripts","date":"September 21, 2014","description":null},"fields":{"slug":"/some-useful-jenkins-groovy-scripts/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/some-useful-jenkins-groovy-scripts/","previous":{"fields":{"slug":"/auto-build-and-deploy-github-pages-with-travis-ci/"},"frontmatter":{"title":"Auto build and deploy GitHub pages with Travis-CI"}},"next":{"fields":{"slug":"/reloading-a-shiny-application-on-source-changes/"},"frontmatter":{"title":"Reloading a Shiny application on source changes"}}}}}