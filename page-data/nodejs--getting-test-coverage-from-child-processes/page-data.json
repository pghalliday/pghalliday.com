{"componentChunkName":"component---src-templates-blog-post-js","path":"/nodejs--getting-test-coverage-from-child-processes/","result":{"data":{"site":{"siteMetadata":{"title":"pghalliday.com","siteUrl":"https://pghalliday.com"}},"markdownRemark":{"id":"5aa5dbe5-9925-50f9-9d14-4f86b4784706","excerpt":"This is a problem that I keep running into. I like to use a combination of ,  and  to get coverage reports from my unit tests. The problem is that this createsâ€¦","html":"<p>This is a problem that I keep running into. I like to use a combination of <code class=\"language-text\">Grunt</code>, <code class=\"language-text\">Mocha</code> and <code class=\"language-text\">Blanket</code> to get coverage reports from my unit tests. The problem is that this creates a global variable to collect the coverage data in the process in which the code under test runs. Normally this is the same process in which <code class=\"language-text\">Grunt</code> and <code class=\"language-text\">Mocha</code> are running, however I have a common class of tests in which this is not true.</p>\n<p>When I want to perform an end to end integration test or test an entry point to a command line tool then usually I want to use <code class=\"language-text\">child_process.exec</code> or <code class=\"language-text\">child_process.spawn</code> to kick it off. This first became apparent when I wanted to test a plugin for <code class=\"language-text\">Grunt</code> itself, <code class=\"language-text\">grunt-mocha-test</code>. The workaround was to create a special script that could be launched in place of <code class=\"language-text\">Grunt</code> that would programatically call <code class=\"language-text\">Grunt</code>, collect the coverage data and then write it to a file. This script would then be launched by a wrapper to <code class=\"language-text\">child_process.exec</code> that would collect the coverage data after the exec had completed and merge it with the coverage data from the parent process.</p>\n<p>This works well but is not very portable. The challenge then is to create a generic solution to the problem and here it is.</p>\n<p>The newly published <a href=\"https://www.npmjs.org/package/cover-child-process\"><code class=\"language-text\">cover-child-process</code></a> module can merge coverage data from Blanket instrumented source files running in child processes with the coverage data collected in the parent process.</p>\n<p>Support for source instrumented with other coverage tools should be easy to add in the future too. Yay :)</p>","frontmatter":{"disqus_identifier":"nodejs--getting-test-coverage-from-child-processes","title":"NodeJS - Getting test coverage from child processes","date":"February 23, 2014","description":null},"fields":{"slug":"/nodejs--getting-test-coverage-from-child-processes/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/nodejs--getting-test-coverage-from-child-processes/","previous":{"fields":{"slug":"/submitting-mocha-bdd-test-results-to-sonar/"},"frontmatter":{"title":"Submitting Mocha BDD test results to Sonar"}},"next":{"fields":{"slug":"/running-a-full-bitcoin-node-on-aws/"},"frontmatter":{"title":"Running a full Bitcoin node on AWS"}}}}}