{"componentChunkName":"component---src-templates-blog-post-js","path":"/reloading-a-shiny-application-on-source-changes/","result":{"data":{"site":{"siteMetadata":{"title":"Peter Halliday","siteUrl":"https://pghalliday.com/portfolio"}},"markdownRemark":{"id":"d32ef303-57fd-52b6-98cc-07dbb795729e","excerpt":"I have been trying to implement watching for changes to source code and auto reloading a Shiny application. The problem being that Shiny applications only…","html":"<p>I have been trying to implement watching for changes to source code and auto reloading a <a href=\"http://shiny.rstudio.com/\">Shiny</a> application. The problem being that Shiny applications only reload changes to <code class=\"language-text\">server.R</code> and <code class=\"language-text\">ui.R</code> by default, which isn’t so useful when your app gets complicated and you want to make it more modular.</p>\n<h2>Option 1 - Shell goodness :)</h2>\n<p>Initially I wanted to add minimal new stuff to my tool chain so I was looking for something that I could do in a shell script. My initial solution was <code class=\"language-text\">inotify-tools</code>. Simple to install:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> inotify-tools</code></pre></div>\n<p>And once I got my head around some shell scripts malarkey, simple to configure by creating a <code class=\"language-text\">watch.sh</code> script:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/sh</span>\n\n<span class=\"token assign-left variable\">WATCHED_DIR</span><span class=\"token operator\">=</span><span class=\"token variable\">${1-.<span class=\"token operator\">/</span>app}</span>\n<span class=\"token assign-left variable\">PORT</span><span class=\"token operator\">=</span><span class=\"token variable\">${2-5000}</span>\n\n<span class=\"token function-name function\">start</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  R -e <span class=\"token string\">\"shiny::runApp('<span class=\"token variable\">$WATCHED_DIR</span>', port = <span class=\"token variable\">$PORT</span>)\"</span> <span class=\"token operator\">&amp;</span>\n  <span class=\"token assign-left variable\">PID</span><span class=\"token operator\">=</span><span class=\"token variable\">$!</span>\n<span class=\"token punctuation\">}</span>\n\nstart\n\ninotifywait -mr <span class=\"token variable\">$WATCHED_DIR</span> --format <span class=\"token string\">'%e %f'</span> <span class=\"token punctuation\">\\</span>\n  -e modify -e delete -e move -e create <span class=\"token punctuation\">\\</span>\n  <span class=\"token operator\">|</span> <span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">read</span> event <span class=\"token function\">file</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$event</span> <span class=\"token variable\">$file</span>\n\n  <span class=\"token function\">kill</span> <span class=\"token variable\">$PID</span>\n  start\n\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>By default this watches <code class=\"language-text\">./app</code> directory and restarts the Shiny application on port <code class=\"language-text\">5000</code> whenever a file or directory change is detected (modified, deleted, moved or created). You can also override the path and port on the command line, eg:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">./watch.sh ./src <span class=\"token number\">5001</span></code></pre></div>\n<p>Awesome :) and I’m so pleased with it that I just had to record it here for posterity. The fact is though that I don’t use it anymore (I used it for about 5 minutes). The reason being that next I wanted to integrate <a href=\"http://livereload.com\">LiveReload</a> to also refresh my browser window on updates.</p>\n<h2>Option 2 - Ruby magic!</h2>\n<p>The simplest way for me to run a LiveReload server was with the <code class=\"language-text\">guard-livereload</code> ruby gem. This means installing <code class=\"language-text\">guard</code> and running that. So let’s face it, if I’m going to run guard anyway, there’s not much point reloading the application with <code class=\"language-text\">inotifywait</code> when I could also use <code class=\"language-text\">guard-process</code>. So I made sure I had ruby and bundler installed:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> ruby\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> ruby-dev\n<span class=\"token function\">sudo</span> gem <span class=\"token function\">install</span> bundler</code></pre></div>\n<p>Created the following <code class=\"language-text\">Gemfile</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">source <span class=\"token string\">\"https://rubygems.org\"</span>\n\ngem <span class=\"token string\">'guard'</span>\ngem <span class=\"token string\">'guard-livereload'</span>\ngem <span class=\"token string\">'guard-process'</span></code></pre></div>\n<p>And installed dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">bundle <span class=\"token function\">install</span></code></pre></div>\n<p>Created the following <code class=\"language-text\">Guardfile</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">dir <span class=\"token operator\">=</span> <span class=\"token string\">'app'</span>\nport <span class=\"token operator\">=</span> <span class=\"token number\">5000</span>\n\nguard <span class=\"token string\">'process'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Shiny'</span><span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"shiny::runApp('<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>dir<span class=\"token delimiter tag\">}</span></span>', port = <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>port<span class=\"token delimiter tag\">}</span></span>)\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">do</span>\n  watch<span class=\"token punctuation\">(</span><span class=\"token regex\">%r{<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>dir<span class=\"token delimiter tag\">}</span></span>/.+\\.R$}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\nguard <span class=\"token string\">'livereload'</span><span class=\"token punctuation\">,</span> grace_period<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span> <span class=\"token keyword\">do</span>\n  watch<span class=\"token punctuation\">(</span><span class=\"token regex\">%r{<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>dir<span class=\"token delimiter tag\">}</span></span>/.+\\.R$}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Note the order of the guards to ensure the restart happens before browsers are notified and the configured <code class=\"language-text\">grace_period</code> for LiveReload to ensure that the application has finished starting.</p>\n<p>Now running:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">bundle <span class=\"token builtin class-name\">exec</span> guard</code></pre></div>\n<ul>\n<li>Launches my application on port 5000</li>\n<li>\n<p>Watches for changes then</p>\n<ul>\n<li>reloads the application</li>\n<li>reloads connected browsers running the LiveReload plugin</li>\n</ul>\n</li>\n</ul>","frontmatter":{"disqus_identifier":"reloading-a-shiny-application-on-source-changes","title":"Reloading a Shiny application on source changes","date":"February 17, 2015","description":null},"fields":{"slug":"/reloading-a-shiny-application-on-source-changes/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/reloading-a-shiny-application-on-source-changes/","previous":{"fields":{"slug":"/some-useful-jenkins-groovy-scripts/"},"frontmatter":{"title":"Some useful Jenkins Groovy scripts"}},"next":{"fields":{"slug":"/unattended-install-of-virtualbox-extension-pack/"},"frontmatter":{"title":"Unattended Install of VirtualBox Extension Pack"}}}}}